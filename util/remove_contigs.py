#!/usr/bin/python
#
# Script to remove entire contigs from FSA and TBL files given a list of 
# contigs to remove and a directory where somewhere down that path there 
# are new_contig.fsa and new_contig.tbl files generated from 
# trim_contamination.pl
#
# HOW TO RUN: python remove_contigs.py -contig_list contigs_to_remove.txt -out_dir /path/to/out_dir_prefix 
#
# This will produce a set of final_contig.fsa and final_contig.tbl files for
# each directory. 
#
# Author: James Matsumura

import sys, argparse, os

def main():

	parser = argparse.ArgumentParser(description='Script to prep files for trim_contamination.pl.')
	parser.add_argument('-contig_list', type=str, required=True, help='Path to the contigs_to_remove.txt files generated by extract_contaminants.py.')
	parser.add_argument('-out_dir', type=str, required=True, help='Prefix to directory where all this output will be written and where the output from trim_contamination.pl is located.')
	args = parser.parse_args()
	
	contigs_to_remove,genomes_to_remove = (set() for i in range(2))

	with open(args.contig_list,'r') as contig_list:
		for line in contig_list:
			contigs_to_remove.add(line.split('\t')[0])
			genomes_to_remove.add(line.split('\t')[0].split('_')[0])

	for root,dirs,files in os.walk(args.out_dir):
		for file in files:
			if file.endswith(".fsa") and file.startswith("new"):
				fsa_file = os.path.join(root, file)
				fsa_rc(contigs_to_remove,genomes_to_remove,fsa_file)

			elif file.endswith(".tbl") and file.startswith("new"):
				tbl_file = os.path.join(root, file)
				tbl_rc(contigs_to_remove,genomes_to_remove,tbl_file)

# Two functions to remove contigs from either FSA or TBL files given the name
# of the contigs, the names of the genomes,  as well as the path to the files to remove them from.

def fsa_rc(contigs,genomes,fsa):

	with open(fsa,'r') as file:
		first_line = file.readline()
		genome = first_line.split('_')[0][1:]
		new_file = fsa.replace('/new_','/final_')

		if genome not in genomes: # doesn't need processing
			os.system('cp {0} {1}'.format(fsa,new_file))
			return

	with open(fsa,'r') as file:
		# iterate over the file and remove contigs
		fasta_entry = []
		relevant_fasta = False

		with open(new_file,'w') as out:
			for line in file:
				if line.startswith('>'):
					current_contig = line[1:-1]

					if len(fasta_entry) > 0:
						for x in fasta_entry:
							out.write(x)

						relevant_fasta = False
						fasta_entry = []

					if current_contig not in contigs:
						fasta_entry.append(line)
						relevant_fasta = True

				elif relevant_fasta == True:
					fasta_entry.append(line)

			# Handle an entry in the last line
			if len(fasta_entry) > 0:
				for x in fasta_entry:
					out.write(x)				
			

def tbl_rc(contigs,genomes,tbl):

	with open(tbl,'r') as file:
		first_line = file.readline()
		genome = first_line.split(' ')[1].split('_')[0]
		new_file = tbl.replace('/new_','/final_')

		if genome not in genomes:
			os.system('cp {0} {1}'.format(tbl,new_file))
			return

	with open(tbl,'r') as file:
		# iterate over the file and remove contigs
		tbl_entry = []
		relevant_tbl = False

		with open(new_file,'w') as out:
			for line in file:
				if line.startswith('>'):
					current_contig = line.split(' ')[0][:-1]

					if len(tbl_entry) > 0:
						for x in tbl_entry:
							out.write(x)

						relevant_tbl = False
						tbl_entry = []

					if current_contig not in contigs:
						tbl_entry.append(line)
						relevant_tbl = True

				elif relevant_tbl == True:
					tbl_entry.append(line)

			# Handle an entry in the last line
			if len(tbl_entry) > 0:
				for x in tbl_entry:
					out.write(x)


if __name__ == '__main__':
	main()
