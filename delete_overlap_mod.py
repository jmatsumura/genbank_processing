

# Script to delete completely overlapping CDS regions. Explicitly, this means the
# following will be deleted:
# 1) A CDS entirely within a CDS
# 2) A CDS entirely within a xRNA
# The following will not be deleted:
# 1) A xRNA entirely within a CDS

import sys, re, shutil

metadata = str(sys.argv[1])
out_dir = str(sys.argv[2])
file_type = str(sys.argv[3])

md = open(metadata,'r')

# regex for GBK file
regex_for_gene = r'^\s+gene\s+[complement]*\(?<?\d+..>?\d+\)?'
regex_for_rna = r'^\s+[a-z]*RNA\s+[complement]*\(*\d+..\d+\)*'
regex_for_locus = r'^\s+/locus_tag="(.*)"'

# regex for TBL file
regex_for_tbl_start = r'^<?\d+\t>?\d+\tgene'
regex_for_tbl_locus = r'^\s+locus_tag\s+(.*)$'

# Iterate over the metadata file, one line per GBK to process
for line in md:
    line = line.strip('\n') 
    md_vals = line.split('\t')

    locus = ""
    if md_vals[1][-1:] == "_": # trim underscore if present
        locus = md_vals[1][:-1]
    else:
        locus = md_vals[1]

    # Pull the discrep file in generated by tbl2asn.
    disc_in = "%s/%s/%s_discrep.txt" % (out_dir,locus,locus)
    disc = open(disc_in,'r')

    input_file = ""
    output_file = ""

    # Pull the GBK file in to potentially modify
    if file_type == "gbk":
        input_file = "%s/%s/ec_numbers_mod.gbk" % (out_dir,locus)
        output_file = "%s/%s/delete_overlap_mod.gbk" % (out_dir,locus)
    elif file_type == "tbl":
        input_file = "%s/%s/%s.tbl" % (out_dir,locus,locus)
        output_file = "%s/%s/%s.new.tbl" % (out_dir,locus,locus)

    infile = open(input_file,'r')

    # Write out a GBK/TBL file with overlaps deleted (if any are present)
    outfile = open(output_file,'w')

    # Write out which genes are being deleted
    delete_out = "%s/%s/deleted_ids.txt" % (out_dir,locus)
    delete_out = open(delete_out,'a')

    overlap = False
    found_overlapping_entries = False
    delete_us = set()
    container,containee = ("" for i in range(2))

    # Iterate over the discrep file to find any relevant CDS/RNA within CDS/RNA.
    for line in disc:
        if line.startswith('CONTAINED_CDS:') and overlap == False:
            overlap = True
        # If reached detailed report and haven't found the above string, no overlap present
        elif line.startswith('Detailed Report') and overlap == False: 
            break

        if line.startswith('DiscRep_ALL:CONTAINED_CDS::'):
            found_overlapping_entries = True
        elif found_overlapping_entries == True:
            if line.startswith('DiscRep'): # reached next discrep set, done finding overlaps
                found_overlapping_entries = False
                break # got all that we need from discrep file
            else: # identify the loci that are entirely contained within another
                if '\t' in line:

                    line = line.strip('\n')
                    elements = line.split('\t')

                    if container == "": # overarching CDS
                        container = elements[-1]

                    elif containee == "": # CDS within CDS 
                        containee = elements[-1]
                        delete_us.add(elements[-1]) # grab the locus tag to delete
                        delete_out.write("%s\t%s\n" % (elements[-1],elements[-2]))
                        container,containee = ("" for i in range(2))

    within_gene = False
    rna_within = False
    gene_region = []
    locus = ""

    # Iterate over the GBK/TBL file and skip any gene entries that are found entirely
    # within another. 
    for line in infile:
        if overlap == True:

            if file_type == 'gbk':

                # If we haven't seen a gene region...
                if re.search(regex_for_gene,line) and within_gene == False:
                    gene_region.append(line)
                    within_gene = True

                # These two cases warrant a check for whether or not we are
                # to remove this gene region due to overlap.  
                elif (re.search(regex_for_gene,line) and within_gene == True) or line.startswith('ORIGIN'):
                    
                    locus = ""
                    for ele in gene_region:
                        if "/locus_tag" in ele:
                            locus = re.search(regex_for_locus,ele).group(1)
                        elif re.search(regex_for_rna,ele):
                            rna_within = True

                    if rna_within == True:
                        for ele in gene_region:
                            outfile.write(ele)
                    elif locus not in delete_us: # if it is to be deleted, just skip
                        for ele in gene_region:
                            outfile.write(ele)

                    # Reinitialize
                    within_gene = False
                    rna_within = False
                    gene_region = []

                    if line.startswith('ORIGIN'):
                        outfile.write(line)

                    # Need to catch the wrapper "if" check within this elif
                    elif re.search(regex_for_gene,line) and within_gene == False:
                        gene_region.append(line)
                        within_gene = True

                # Anything in-between is within the gene region and should be added
                elif within_gene == True:
                    gene_region.append(line)

                # Simply write out any of the lines outside these regions
                else:
                    outfile.write(line)

            elif file_type == 'tbl': # only process either gbk or tbl

                # Have hit a new contig
                if line.startswith(">"):

                    # If we are at a new contig, check if the previous gene
                    # needs to be included or not
                    if within_gene == True:
                        if locus not in delete_us:
                            for ele in gene_region:
                                outfile.write(ele)

                        within_gene = False
                        gene_region = []

                    outfile.write(line) # always will add the contig

                # Need to isolate the very first gene region
                elif re.search(regex_for_tbl_start,line) and within_gene == False:
                    gene_region.append(line)
                    within_gene = True

                # We were just in a gene region and have now found another, do a check
                # to see whether or not to include the previous gene.
                elif re.search(regex_for_tbl_start,line) and within_gene == True:
                    if locus not in delete_us:
                        for ele in gene_region:
                            outfile.write(ele)

                    locus = ""
                    gene_region = []
                    gene_region.append(line) # start a new gene entry

                elif within_gene == True: # build the entire gene entry
                
                    if re.search(regex_for_tbl_locus,line): # if locus found, capture
                        locus = re.search(regex_for_tbl_locus,line).group(1)

                    gene_region.append(line)

        else:
            outfile.write(line) # simply copying over, straying away from extra dependencies (cp cmd)

    # If we have a TBL file and we deleted, need to check the very last entry here
    if file_type == 'tbl' and overlap == True:
        if locus not in delete_us:
            for ele in gene_region:
                outfile.write(ele)

    # If we have a TBL file in general, need to rename for downstream processing
    if file_type == 'tbl':
        shutil.move(output_file,input_file)
